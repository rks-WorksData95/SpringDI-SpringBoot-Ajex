<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Integration Key to Customer Experience - Storage Services</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OkJlETzdAes/integration-key-to-customer-experience-storage-services.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="BPM Suite" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-integration_key_to_customer_experience_storage_services</id><updated>2018-12-27T06:00:08Z</updated><published>2018-12-27T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-h6FO-sdoH4A/W-AjgSgf-aI/AAAAAAAAtPw/JFoyKy0JPbU9hj0jggWQqESQc6Ywr0GaQCPcBGAYYCw/s1600/omnichannel-header.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="454" data-original-width="895" height="162" src="https://2.bp.blogspot.com/-h6FO-sdoH4A/W-AjgSgf-aI/AAAAAAAAtPw/JFoyKy0JPbU9hj0jggWQqESQc6Ywr0GaQCPcBGAYYCw/s320/omnichannel-header.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Part 5 - container platform details&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;In &lt;a href="http://www.schabell.org/2018/12/integraiton-key-to-customer-experience-container-platform.html" target="_blank"&gt;my previous article from this series&lt;/a&gt; we looked in to details that determine how your integration becomes the key to transforming your customer experience.&lt;br /&gt;&lt;br /&gt;It started with laying out the process of how I've approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint.&lt;br /&gt;&lt;br /&gt;Now it's time to cover various blueprint details.&lt;br /&gt;&lt;br /&gt;This article covers the final elements in the blueprint &lt;i&gt;storage services, &lt;/i&gt;which are fundamental to the&amp;nbsp;generic architectural overview.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Architectural details&lt;/h3&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;a href="https://4.bp.blogspot.com/-Ga9ccmeyAD4/XBy231PrdEI/AAAAAAAAtZA/WOYNmHXmpcYgE9cbpEmEsiZyDhoMi_aSgCLcBGAs/s1600/Screenshot%2B2018-12-21%2Bat%2B10.47.57.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="177" data-original-width="1110" height="51" src="https://4.bp.blogspot.com/-Ga9ccmeyAD4/XBy231PrdEI/AAAAAAAAtZA/WOYNmHXmpcYgE9cbpEmEsiZyDhoMi_aSgCLcBGAs/s320/Screenshot%2B2018-12-21%2Bat%2B10.47.57.png" title="" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;As mentioned before, the architectural details covered here are base on real customer integration solutions using open source technologies. The elements presented here are then the &lt;i&gt;generic common architectural elements&lt;/i&gt;&amp;nbsp;that I've identified and collected in a generic architectural blueprint. It's my intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented, but it's expected that they'll be evolving visually over time. There are many ways to represent each element in this architectural blueprint, but I've chosen icons, text and colours that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or &lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact me directly&lt;/a&gt; with your feedback.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Now let's take a look at the details in this architecture and outline the elements uncovered in my research.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Storage&lt;/h3&gt;&lt;div&gt;While every organization needs and certainly has chosen one or more the storage services described in this article, for completeness I've presented the most common choices found in my research.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://3.bp.blogspot.com/-ziYQaHItlp8/XBy0mjHrvzI/AAAAAAAAtYw/jYr8jjiGLecO1bODB4a7J1la2_zfd5-0QCLcBGAs/s1600/Screenshot%2B2018-12-21%2Bat%2B10.37.52.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="49" data-original-width="332" height="47" src="https://3.bp.blogspot.com/-ziYQaHItlp8/XBy0mjHrvzI/AAAAAAAAtYw/jYr8jjiGLecO1bODB4a7J1la2_zfd5-0QCLcBGAs/s320/Screenshot%2B2018-12-21%2Bat%2B10.37.52.png" title="" width="320" /&gt;&lt;/a&gt;The basic legacy solution every organization researched had was a &lt;i&gt;virtual block storage (VBS)&lt;/i&gt;&amp;nbsp;solution. It can be in your datacenter, on site in your developer machine, or hosted by almost any cloud provider. It provides the fixed-size raw storage capacity&amp;nbsp;and must have consistent I/O performance with low-latency connectivity.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-SuDSZwCDqn4/XBy0midBcXI/AAAAAAAAtYs/8287R8TD-Ms7ZacfUWQMvySUcXVNU9L6wCLcBGAs/s1600/Screenshot%2B2018-12-21%2Bat%2B10.38.10.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="47" data-original-width="333" height="45" src="https://1.bp.blogspot.com/-SuDSZwCDqn4/XBy0midBcXI/AAAAAAAAtYs/8287R8TD-Ms7ZacfUWQMvySUcXVNU9L6wCLcBGAs/s320/Screenshot%2B2018-12-21%2Bat%2B10.38.10.png" title="" width="320" /&gt;&lt;/a&gt;When files and data sets become very large, then &lt;i&gt;object-based storage (OBS) &lt;/i&gt;becomes the service of choice. It's available on premise or as services hosted by most cloud providers to ensure you can leverage the persistence of your choice for your specific use case.&lt;br /&gt;&lt;br /&gt;For container-based applications and services, persistence is achieved with &lt;i&gt;container-native storage (CNS)&lt;/i&gt;&amp;nbsp;solutions. As previously mentioned, central to all research conducted was a distinct leaning towards the use of a container platform for applications and microservices.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-kJxvpXXz2uU/XBy0muzpCwI/AAAAAAAAtYo/_f-paYYJveYr-twDOGld0VTirvzbpdSoACLcBGAs/s1600/Screenshot%2B2018-12-21%2Bat%2B10.38.02.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="45" data-original-width="331" height="43" src="https://1.bp.blogspot.com/-kJxvpXXz2uU/XBy0muzpCwI/AAAAAAAAtYo/_f-paYYJveYr-twDOGld0VTirvzbpdSoACLcBGAs/s320/Screenshot%2B2018-12-21%2Bat%2B10.38.02.png" title="" width="320" /&gt;&lt;/a&gt;The need for storage for these container-based elements leads the organization to search for CNS solutions. It's native to the container platform and delivers the performance and ease of use desired by developers and architects constructing the integration solutions for omnichannel.&lt;br /&gt;&lt;br /&gt;The key to our generic integration with these storage services lies in the previously discussed &lt;i&gt;integration data microservices&lt;/i&gt;&amp;nbsp;that make all forms of storage services available across your architecture. These details are not all-knowing, but should give you the guidance you'd need to get started in your own architectural situations.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div&gt;This overview covers the container platform elements that make up our architecture blueprint for omnichannel customer experience use case.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;An overview of the series on omnichannel customer experience portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-architectural-elements.html" target="_blank"&gt;Generic common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-external-application-details.html" target="_blank"&gt;External application details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/12/integration-key-to-customer-experience-api-management-details.html" target="_blank"&gt;API management details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/12/integraiton-key-to-customer-experience-container-platform.html" target="_blank"&gt;Container platform essentials&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/12/integration-key-to-customer-experience-storage-services.html" target="_blank"&gt;Storage services&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Dissecting several specific cases of integration architecture&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, we start taking a look at specific integration architectures that tie in all the elements we've discussed as part of a specific case in an architecture for omnichannel customer experience.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=F36fUl-DcKc:fYaQVS6Utck:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=F36fUl-DcKc:fYaQVS6Utck:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=F36fUl-DcKc:fYaQVS6Utck:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=F36fUl-DcKc:fYaQVS6Utck:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=F36fUl-DcKc:fYaQVS6Utck:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=F36fUl-DcKc:fYaQVS6Utck:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=F36fUl-DcKc:fYaQVS6Utck:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=F36fUl-DcKc:fYaQVS6Utck:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=F36fUl-DcKc:fYaQVS6Utck:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=F36fUl-DcKc:fYaQVS6Utck:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=F36fUl-DcKc:fYaQVS6Utck:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/F36fUl-DcKc" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OkJlETzdAes" height="1" width="1" alt=""/&gt;</content><summary>Part 5 - container platform detailsIn my previous article from this series we looked in to details that determine how your integration becomes the key to transforming your customer experience. It started with laying out the process of how I've approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it's time to cover va...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-12-27T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/F36fUl-DcKc/integration-key-to-customer-experience-storage-services.html</feedburner:origLink></entry><entry><title>Camel in Action 2nd edition source code up to date with the Camel 2.23 release</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XDWHbmlQTws/camel-in-action-2nd-edition-source-code.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="book" scheme="searchisko:content:tags" /><category term="Camel in Action" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-camel_in_action_2nd_edition_source_code_up_to_date_with_the_camel_2_23_release</id><updated>2018-12-25T10:13:31Z</updated><published>2018-12-25T10:13:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;I had some time to work on the &lt;a href="https://github.com/camelinaction/camelinaction2"&gt;source code&lt;/a&gt; for our book during the holidays. This year I have been more busy with other stuff so some of the work needed to keep the source code up to date with newer releases of Camel got a bit neglected.&amp;nbsp;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://www.manning.com/books/camel-in-action-second-edition"&gt;&lt;img border="0" data-original-height="273" data-original-width="477" height="183" src="https://3.bp.blogspot.com/-tFCKQ52y9ds/WnV7x1z_FtI/AAAAAAAABiY/JcHEJnvpHqkbv0XtFNqjT0gGyrowac6BACPcBGAYYCw/s320/cia2-released.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Today I just finished the last bits and pushed to github the changes so we are now fully caught up with the latest Apache Camel 2.23.0 release. You can either use the source code directly from the master branch, or pick one of the &lt;a href="https://github.com/camelinaction/camelinaction2/releases"&gt;releases&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Merry Christmas&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=jbC4CChej20:MLnOth5BPBU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=jbC4CChej20:MLnOth5BPBU:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=jbC4CChej20:MLnOth5BPBU:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=jbC4CChej20:MLnOth5BPBU:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=jbC4CChej20:MLnOth5BPBU:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=jbC4CChej20:MLnOth5BPBU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=jbC4CChej20:MLnOth5BPBU:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/jbC4CChej20" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XDWHbmlQTws" height="1" width="1" alt=""/&gt;</content><summary>I had some time to work on the source code for our book during the holidays. This year I have been more busy with other stuff so some of the work needed to keep the source code up to date with newer releases of Camel got a bit neglected.  Today I just finished the last bits and pushed to github the changes so we are now fully caught up with the latest Apache Camel 2.23.0 release. You can either us...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2018-12-25T10:13:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/jbC4CChej20/camel-in-action-2nd-edition-source-code.html</feedburner:origLink></entry><entry><title>Using a Kotlin-based gRPC API with Envoy proxy for server-side load balancing</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/l7EW7VUw4_Y/" /><category term="Java" /><category term="Kotlin" /><category term="Microservices" /><category term="Modern App Dev" /><category term="Performance" /><category term="Envoy" /><category term="envoy proxy" /><category term="gRPC" /><category term="performance" /><category term="Protobuf" /><category term="protocol buffers" /><author><name>Faisal Masood</name></author><id>https://developers.redhat.com/blog/?p=546967</id><updated>2018-12-24T12:00:14Z</updated><published>2018-12-24T12:00:14Z</published><content type="html">&lt;p&gt;These days, &lt;a href="https://developers.redhat.com/blog/category/microservices/"&gt;microservices&lt;/a&gt;-based architectures are being implemented almost everywhere. One business function could be using a few microservices that generate lots of network traffic in the form of messages being passed around. If we can make the way we pass messages more efficient by having a smaller message size, we could  the same infrastructure to handle higher loads.&lt;/p&gt; &lt;p&gt;&lt;a href="https://opensource.google.com/projects/protobuf"&gt;Protobuf&lt;/a&gt; (short for &amp;#8220;protocol buffers&amp;#8221;) provides language- and platform-neutral mechanisms for serializing structured data for use in communications protocols, data storage, and more. &lt;a href="https://grpc.io/faq/"&gt;gRPC&lt;/a&gt; is a modern, open source remote procedure call (RPC) framework that can run anywhere. Together, they provide an efficient message format that is automatically compressed and provides first-class support for complex data structures among &lt;a href="https://www.bizety.com/2018/11/12/protocol-buffers-vs-json/"&gt;other benefits (unlike JSON)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Microservices environments require lots of communication between services, and for this to happen, services need to agree on a few things. They need to agree on an API for exchanging data, for example, POST (or PUT) and GET to send and receive messages. And they need to agree on the format of the data (JSON). Clients calling the service also need to write lots of boilerplate code to make the remote calls (frameworks!). Protobuf and gRPC provide a way to define the schema of the message (JSON cannot) and generate skeleton code to consume a gRPC service (no frameworks required).&lt;span id="more-546967"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;While JSON is a human-readable format that provides a nested data structure, it has a few drawbacks, for example, no schema, objects can get quite large, and there might be a lack of comments.&lt;/p&gt; &lt;p&gt;This article shows how gRPC and Protobuf can provide a solution to many of these limitations.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;So what are gRPC and Protobuf?&lt;/h2&gt; &lt;p&gt;gRPC is a modern, open source remote procedure call (RPC) framework that can run anywhere. It enables client and server applications to communicate transparently and makes it easier to build connected systems. gRPC is &lt;a href="https://www.cncf.io/project/grpc/attachment/grpc-2/"&gt;incubating&lt;/a&gt; in &lt;a href="https://www.cncf.io"&gt;CNCF&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;As a fun project, build a streaming server in JSON over HTTP. Then you will know what I am talking about. &lt;a href="https://grpc.io/docs/guides/concepts.html#server-streaming-rpc"&gt;Streaming&lt;/a&gt; is built in with gRPC. See &lt;a href="https://grpc.io/docs/guides/concepts.html"&gt;this&lt;/a&gt; for more gRPC concepts. Somehow, gRPC reminds me of &lt;a href="http://www.corba.org"&gt;CORBA.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Protobuf is a data serialization tool. Protobuf provides the capability to define fully typed schemas for messages. It allows you to insert documentation in the message itself.&lt;/p&gt; &lt;p&gt;gRPC uses &lt;a href="https://http2.github.io"&gt;HTTP/2&lt;/a&gt; with a &lt;a href="https://http2.github.io/faq/#why-just-one-tcp-connection"&gt;persistent connection&lt;/a&gt; and &lt;a href="https://http2.github.io/faq/#why-is-http2-multiplexed"&gt;multiplexing&lt;/a&gt; for better performance compared to services based on REST over HTTP 1.1. The persistent connection, however, creates a problem with &lt;a href="https://en.wikipedia.org/wiki/OSI_model#Layer_4:_Transport_Layer"&gt;level 4&lt;/a&gt; proxies. We need a proxy that supports load balancing on level 7. &lt;a href="https://www.envoyproxy.io/docs/envoy/v1.7.0/intro/what_is_envoy"&gt;Envoy&lt;/a&gt; can proxy the gRPC calls with load balancing support on the server. Envoy also provides service discovery based on an external service known as &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/eds.proto.html?highlight=clusterloadassignment"&gt;EDS&lt;/a&gt;, and I will show how to use that feature of Envoy, too.&lt;/p&gt; &lt;h2&gt;What we will build&lt;/h2&gt; &lt;p&gt;In this article, I am building a &lt;a href="https://kotlinlang.org/"&gt;Kotlin-&lt;/a&gt;based gRPC service. I will load balance between multiple instances of my service using Enovy proxy. I have also configured a simple REST service that provides the service discovery for the Envoy proxy. The basic architecture is as follows.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/gRPC-Blog-2.png"&gt;&lt;img class=" aligncenter wp-image-547747 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/gRPC-Blog-2-1024x850.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/gRPC-Blog-2-1024x850.png" alt="Basic architecture " width="640" height="531" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/gRPC-Blog-2-1024x850.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/gRPC-Blog-2-300x249.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/gRPC-Blog-2-768x637.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Set up the components&lt;/h2&gt; &lt;p&gt;First, we need to define a &lt;a href="https://developers.google.com/protocol-buffers/docs/overview"&gt;Protobuf message&lt;/a&gt; that will serve as the contract between the client and the server (refer to &lt;a href="https://github.com/masoodfaisal/grpc-example/blob/master/src/main/proto/events/events.proto"&gt;event.proto&lt;/a&gt; for the complete file):&lt;/p&gt; &lt;pre&gt;syntax = "proto3"; import "google/protobuf/empty.proto"; package event; option java_package = "com.proto.event"; option java_multiple_files = true; message Event { int32 event_id = 1; string event_name = 2; repeated string event_hosts = 3; } enum EVENT_TYPE { UNDECLARED = 0; BIRTHDAY = 1; MARRIAGE = 2; } message CreateEventResponse{ string success = 1; } message AllEventsResponse{ Event event = 1; } service EventsService{ rpc CreateEvent(Event) returns (CreateEventResponse) {}; rpc AllEvents(google.protobuf.Empty) returns (stream AllEventsResponse) {}; } &lt;/pre&gt; &lt;p&gt;This message will then be used by the &lt;a href="https://grpc.io/blog/kotlin-gradle-projects"&gt;Gradle gRPC&lt;/a&gt; plugin to generate stubs. The client and server code will use these stubs. You can run Gradle&amp;#8217;s &lt;code&gt;generateProto&lt;/code&gt; task to generate the stubs.&lt;/p&gt; &lt;p&gt;Now it is time to write the &lt;a href="https://github.com/masoodfaisal/grpc-example/blob/master/src/main/java/com/faisal/grpc/server/EventServer.kt"&gt;server&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;val eventServer = ServerBuilder.forPort(50051) .addService(EventsServiceImpl()) //refer to the server implementation .build() eventServer.start() println("Event Server is Running now!") Runtime.getRuntime().addShutdownHook( Thread{ eventServer.shutdown() } ) eventServer.awaitTermination() &lt;/pre&gt; &lt;p&gt;Once the boilerplate code of the server is complete, we write the server&amp;#8217;s &lt;a href="https://github.com/masoodfaisal/grpc-example/blob/master/src/main/java/com/faisal/grpc/server/EventsServiceImpl.kt"&gt;business logic&lt;/a&gt;, which prints a hardcoded message and returns a fixed response.&lt;/p&gt; &lt;pre&gt; override fun createEvent(request: Event?, responseObserver: StreamObserver&amp;#60;CreateEventResponse&amp;#62;?) { println("Event Created ") responseObserver?.onNext(CreateEventResponse.newBuilder().setSuccess("true").build()) responseObserver?.onCompleted() } &lt;/pre&gt; &lt;p&gt;Next, let&amp;#8217;s write a &lt;a href="https://github.com/masoodfaisal/grpc-example/blob/master/src/main/java/com/faisal/grpc/client/EventClient.kt"&gt;client&lt;/a&gt; to consume our events service:&lt;/p&gt; &lt;pre&gt;fun main(args: Array&amp;#60;String&amp;#62;) { var eventsChannel = ManagedChannelBuilder.forAddress("10.0.0.112", 8080) .usePlaintext() .build() var eventServiceStub = EventsServiceGrpc.newBlockingStub(eventsChannel) for(i in 1..20) { eventServiceStub.createEvent(Event.newBuilder().setEventId(i).setEventName("Event $i").build()) } eventsChannel.shutdown() }&lt;/pre&gt; &lt;p&gt;I copied the server code into another &lt;a href="https://github.com/masoodfaisal/grpc-example/blob/master/src/main/java/com/faisal/grpc/server/EventServer2.kt"&gt;file&lt;/a&gt; and changed the port number to mimic multiple instances of our events service.&lt;/p&gt; &lt;p&gt;Envoy proxy configuration has three parts. All these settings are in &lt;a href="https://github.com/masoodfaisal/grpc-example/blob/master/envoy-docker/envoy.yaml"&gt;envoy.yaml&lt;/a&gt;. Make sure you change the IP address of the EDS service according to your settings. Update the IP address of the service in the &lt;a href="https://github.com/masoodfaisal/grpc-example/blob/master/src/main/java/com/faisal/eds/EDSServer.kt"&gt;EDSServer.kt&lt;/a&gt; file.&lt;/p&gt; &lt;p&gt;Define a front-end service. This service will receive requests from the clients.&lt;/p&gt; &lt;pre&gt; listeners: - name: envoy_listener address: socket_address: { address: 0.0.0.0, port_value: 8080 } filter_chains: - filters: - name: envoy.http_connection_manager config: stat_prefix: ingress_http codec_type: AUTO route_config: name: local_route virtual_hosts: - name: local_service domains: ["*"] routes: - match: { prefix: "/" } route: { cluster: grpc_service } http_filters: - name: envoy.router &lt;/pre&gt; &lt;p&gt;Define a back-end service (the name is &lt;code&gt;grpc_service&lt;/code&gt; in the &lt;code&gt;envoy.yaml&lt;/code&gt; file). The front-end service will load balance the calls to this set of servers. Note that this doesn&amp;#8217;t know about the location of the actual back-end service. The location of the back-end service (aka the service discovery) is provided via an EDS service. See the paragraph after the following code, which discusses defining the EDS endpoint.&lt;/p&gt; &lt;pre&gt; - name: grpc_service connect_timeout: 5s lb_policy: ROUND_ROBIN http2_protocol_options: {} type: EDS eds_cluster_config: eds_config: api_config_source: api_type: REST cluster_names: [eds_cluster] refresh_delay: 5s &lt;/pre&gt; &lt;p&gt;Optionally, define an EDS endpoint. (You can provide a fixed list of servers, too.) This is another service that will provide the list of back-end endpoints. This way, Envoy can dynamically adjust to the available servers. I have written this EDS service as a &lt;a href="https://github.com/masoodfaisal/grpc-example/blob/master/src/main/java/com/faisal/eds/EDSServer.kt"&gt;simple class&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt; - name: eds_cluster connect_timeout: 5s type: STATIC hosts: [{ socket_address: { address: 10.0.0.112, port_value: 7070 }}] &lt;/pre&gt; &lt;h2&gt;Execution&lt;/h2&gt; &lt;p&gt;Copy the &lt;a href="https://github.com/masoodfaisal/grpc-example"&gt;project&lt;/a&gt; locally:&lt;/p&gt; &lt;pre&gt;git clone https://github.com/masoodfaisal/grpc-example.git &lt;/pre&gt; &lt;p&gt;Build the project using Gradle:&lt;/p&gt; &lt;pre&gt;cd grpc-example ./gradlew generateProto ./gradlew build &lt;/pre&gt; &lt;p&gt;Bring up the EDS server to provide the service discovery for the Envoy proxy:&lt;/p&gt; &lt;pre&gt;cd grpc-example ./gradlew -PmainClass=com.faisal.eds.EDSServerKt execute &lt;/pre&gt; &lt;p&gt;Initialize multiple instances of the service:&lt;/p&gt; &lt;pre&gt;cd grpc-example ./gradlew -PmainClass=com.faisal.grpc.server.EventServerKt execute ./gradlew -PmainClass=com.faisal.grpc.server.EventServer2Kt execute &lt;/pre&gt; &lt;p&gt;Run the Enovy proxy:&lt;/p&gt; &lt;pre&gt;cd envoy-docker docker build -t envoy:grpclb . docker run -p 9090:9090 -p 8080:8080 envoy:grpclb &lt;/pre&gt; &lt;p&gt;My client makes a call in a loop, which showcases that the load is distributed in a round-robin fashion.&lt;/p&gt; &lt;pre&gt;./gradlew -PmainClass=com.faisal.grpc.client.EventClientKt execute &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;gRPC provides better performance, less boilerplate code to manage, and a strongly typed schema for your microservices. Other features of gRPC that are useful in the microservices world are &lt;a href="https://github.com/grpc/proposal/blob/master/A6-client-retries.md"&gt;retries&lt;/a&gt;, &lt;a href="https://grpc.io/docs/guides/concepts.html#deadlinestimeouts"&gt;timeouts&lt;/a&gt;, and &lt;a href="https://grpc.io/docs/guides/error.html"&gt;error handling&lt;/a&gt;.  A particularly great article on gRPC is available on the &lt;a href="https://www.cncf.io/blog/2018/08/31/grpc-on-http-2-engineering-a-robust-high-performance-protocol/"&gt;CNCF website&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;May your next service be in gRPC.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F24%2Fusing-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing%2F&amp;#38;linkname=Using%20a%20Kotlin-based%20gRPC%20API%20with%20Envoy%20proxy%20for%20server-side%20load%20balancing" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F24%2Fusing-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing%2F&amp;#38;linkname=Using%20a%20Kotlin-based%20gRPC%20API%20with%20Envoy%20proxy%20for%20server-side%20load%20balancing" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F24%2Fusing-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing%2F&amp;#38;linkname=Using%20a%20Kotlin-based%20gRPC%20API%20with%20Envoy%20proxy%20for%20server-side%20load%20balancing" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F24%2Fusing-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing%2F&amp;#38;linkname=Using%20a%20Kotlin-based%20gRPC%20API%20with%20Envoy%20proxy%20for%20server-side%20load%20balancing" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F24%2Fusing-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing%2F&amp;#38;linkname=Using%20a%20Kotlin-based%20gRPC%20API%20with%20Envoy%20proxy%20for%20server-side%20load%20balancing" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F24%2Fusing-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing%2F&amp;#38;linkname=Using%20a%20Kotlin-based%20gRPC%20API%20with%20Envoy%20proxy%20for%20server-side%20load%20balancing" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F24%2Fusing-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing%2F&amp;#38;linkname=Using%20a%20Kotlin-based%20gRPC%20API%20with%20Envoy%20proxy%20for%20server-side%20load%20balancing" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F24%2Fusing-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing%2F&amp;#38;linkname=Using%20a%20Kotlin-based%20gRPC%20API%20with%20Envoy%20proxy%20for%20server-side%20load%20balancing" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F24%2Fusing-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing%2F&amp;#038;title=Using%20a%20Kotlin-based%20gRPC%20API%20with%20Envoy%20proxy%20for%20server-side%20load%20balancing" data-a2a-url="https://developers.redhat.com/blog/2018/12/24/using-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing/" data-a2a-title="Using a Kotlin-based gRPC API with Envoy proxy for server-side load balancing"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/24/using-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing/"&gt;Using a Kotlin-based gRPC API with Envoy proxy for server-side load balancing&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/l7EW7VUw4_Y" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;These days, microservices-based architectures are being implemented almost everywhere. One business function could be using a few microservices that generate lots of network traffic in the form of messages being passed around. If we can make the way we pass messages more efficient by having a smaller message size, we could  the same infrastructure to handle [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/24/using-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing/"&gt;Using a Kotlin-based gRPC API with Envoy proxy for server-side load balancing&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/12/24/using-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">546967</post-id><dc:creator>Faisal Masood</dc:creator><dc:date>2018-12-24T12:00:14Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/24/using-a-kotlin-based-grpc-api-with-envoy-proxy-for-server-side-load-balancing/</feedburner:origLink></entry><entry><title>Eclipse Che 7 is Coming and It’s Really Hot (4/4)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Ge3iukt0YyA/" /><category term="Cloud" /><category term="CodeReady Workspaces" /><category term="Community" /><category term="Developer Tools" /><category term="Eclipse Che" /><category term="Kubernetes" /><category term="cloud" /><category term="cloud native development" /><category term="kubernetes" /><author><name>Stevan LeMeur</name></author><id>https://developers.redhat.com/blog/?p=551067</id><updated>2018-12-21T17:53:02Z</updated><published>2018-12-21T17:53:02Z</published><content type="html">&lt;p&gt;Eclipse Che 7 is an enterprise-grade IDE that is designed to solve many of the challenges faced by enterprise development teams. In my previous articles, I covered the &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/18/eclipse-che-7-coming-part-1/"&gt;main focus areas for Eclipse Che 7&lt;/a&gt;&lt;/em&gt;, the &lt;a href="https://developers.redhat.com/blog/2018/12/19/eclipse-che-7-is-coming-and-its-really-hot-2-4/"&gt;&lt;em&gt;new plugin model&lt;/em&gt;&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/blog/2018/12/20/eclipse-che-7-is-coming-and-its-really-hot-3-4/"&gt;kube-native developer workspaces&lt;/a&gt;. This article explains security and management of Eclipse Che 7 in enterprise deployment scenarios as well as release timing.&lt;/p&gt; &lt;h3 id="c296" class="graf graf--h3 graf-after--figure"&gt;Enterprise Grade Cloud IDE&lt;/h3&gt; &lt;p id="a62e" class="graf graf--p graf-after--h3"&gt;Eclipse Che has gained a great deal of interest in large enterprises that are moving to containers and want to standardize the developer workspace and remove intellectual property (source code) from hard-to-secure laptops. There are a number of features needed in order to make Che a simple-to-manage tool for these large and often private environments. Organizations want to secure workspaces, deploy them on new infrastructure, and make it easier for teams to collaborate while maintaining developer autonomy.&lt;/p&gt; &lt;p id="2660" class="graf graf--p graf-after--p graf--trailing"&gt;For those reasons, we are working on a number of different facets to make Eclipse Che easier to run and simpler to administer and manage.&lt;/p&gt; &lt;section class="section section--body"&gt; &lt;div class="section-content"&gt; &lt;div class="section-inner sectionLayout--insetColumn"&gt; &lt;h3 id="6de4" class="graf graf--h3 graf--leading"&gt;Eclipse Che 7 — timing?&lt;/h3&gt; &lt;p id="8c8c" class="graf graf--p graf-after--h3"&gt;There is &lt;strong class="markup--strong markup--p-strong"&gt;A LOT&lt;/strong&gt; that is coming with Eclipse Che 7. We spent a lot of time redefining the project’s foundations for the future, making it more enjoyable to use, easier to adopt by large enterprise, and able to support its community growth.&lt;/p&gt; &lt;p id="db36" class="graf graf--p graf-after--p"&gt;We are all very excited about this new version. In the following weeks, you’ll be reading more about the new capabilities and how they have been built. Eclipse Con Europe was a great event where we were able to unveil a lot of the work we’ve been doing. Now it is time to share it with a broader audience.&lt;/p&gt; &lt;p id="3ff7" class="graf graf--p graf-after--p"&gt;It’s available today: when you create a new workspace from the latest Eclipse Che release, you can select Che 7 stacks. You can test it now, and you can post feedback or report bugs — those are always helpful and valuable !&lt;/p&gt; &lt;p id="88dc" class="graf graf--p graf-after--p graf--trailing"&gt;Eclipse Che 7 early beta will be available in February with GA-level Che 7 planned for March.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;section class="section section--body"&gt; &lt;div class="section-divider"&gt; &lt;hr class="section-divider" /&gt; &lt;/div&gt; &lt;div class="section-content"&gt; &lt;div class="section-inner sectionLayout--insetColumn"&gt; &lt;h3 id="0dee" class="graf graf--h3 graf--leading"&gt;Try Eclipse Che 7 Now!&lt;/h3&gt; &lt;p id="8481" class="graf graf--p graf-after--h3"&gt;Want to try to the new version of Eclipse Che 7?  Here&amp;#8217;s how:&lt;/p&gt; &lt;p id="ca45" class="graf graf--p graf-after--p"&gt;&lt;strong class="markup--strong markup--p-strong"&gt;Click on &lt;/strong&gt;the following factory URL:&lt;/p&gt; &lt;p class="graf graf--p graf-after--p" style="padding-left: 30px;"&gt;&lt;a class="markup--anchor markup--p-anchor" href="https://che.openshift.io/f?id=factoryvbwekkducozn3jsn" target="_blank" rel="nofollow noopener noopener noopener noopener" data-href="https://che.openshift.io/f?id=factoryvbwekkducozn3jsn"&gt;https://che.openshift.io/f?id=factoryvbwekkducozn3jsn&lt;/a&gt;&lt;/p&gt; &lt;p id="b4c8" class="graf graf--p graf-after--p"&gt;&lt;strong class="markup--strong markup--p-strong"&gt;Or Create your account&lt;/strong&gt; on &lt;a class="markup--anchor markup--p-anchor" href="https://che.openshift.io/" target="_blank" rel="noopener" data-href="https://che.openshift.io"&gt;che.openshift.io&lt;/a&gt;, &lt;strong class="markup--strong markup--p-strong"&gt;create a new workspace&lt;/strong&gt; and select “Che 7” stack.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift.png"&gt;&lt;img class="aligncenter size-large wp-image-549977" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-1024x356.png" alt="Try Eclipse Che 7 on OpenShift" width="640" height="223" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-1024x356.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-300x104.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-768x267.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift.png 1294w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;You can also test on your local machine, by installing the latest version of Eclipse Che, See &lt;em&gt;&lt;a class="markup--anchor markup--p-anchor" href="http://www.eclipse.org/che/docs/#getting-started" target="_blank" rel="noopener" data-href="http://www.eclipse.org/che/docs/#getting-started"&gt;Quick Start with Eclipse Che&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &lt;h3 id="1953" class="graf graf--h3 graf--leading"&gt;Want to learn more?&lt;/h3&gt; &lt;p id="b78e" class="graf graf--p graf-after--h3"&gt;My articles about Eclipse Che 7:&lt;/p&gt; &lt;ul class="postList"&gt; &lt;li id="2127" class="graf graf--li graf-after--p"&gt;Part 1—&lt;a class="markup--anchor markup--li-anchor" href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-1-4-64d79b75ca02" target="_blank" rel="noopener" data-href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-1-4-64d79b75ca02"&gt;Eclipse Che 7 overview, and introducing the new IDE&lt;/a&gt;&lt;/li&gt; &lt;li id="07b2" class="graf graf--li graf-after--li"&gt;Part 2—&lt;a class="markup--anchor markup--li-anchor" href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-2-4-2e2c6accbff4" target="_blank" rel="noopener" data-href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-2-4-2e2c6accbff4"&gt;Introducing the plugin model&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 3—&lt;a href="https://developers.redhat.com/blog/2018/12/20/eclipse-che-7-is-coming-and-its-really-hot-3-4/"&gt;Kube-native developer workspaces&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 4—Functionality for Enterprise Development Teams and schedule (this article)&lt;/li&gt; &lt;/ul&gt; &lt;p id="5fd1" class="graf graf--p graf-after--li graf--trailing"&gt;That’s it for the fourth article introducing Eclipse Che 7. I hope you enjoyed this series.&lt;/p&gt; &lt;h2&gt;See also&lt;/h2&gt; &lt;p&gt;For information about Che running on Red Hat OpenShift, see &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;CodeReady WorkSpaces for OpenShift&lt;/a&gt; (currently in beta) and Doug Tidwell&amp;#8217;s article and videos, &lt;a href="https://developers.redhat.com/blog/2018/12/11/codeready-workspaces-openshift/"&gt;&lt;em&gt;CodeReady Workspaces for OpenShift (Beta)–It works on their machines too&lt;/em&gt;&lt;/a&gt;. Doug covers stacks and workspaces and factories to help  you get started with Che.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Feclipse-che-7-is-coming-and-its-really-hot-4-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%284%2F4%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Feclipse-che-7-is-coming-and-its-really-hot-4-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%284%2F4%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Feclipse-che-7-is-coming-and-its-really-hot-4-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%284%2F4%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Feclipse-che-7-is-coming-and-its-really-hot-4-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%284%2F4%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Feclipse-che-7-is-coming-and-its-really-hot-4-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%284%2F4%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Feclipse-che-7-is-coming-and-its-really-hot-4-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%284%2F4%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Feclipse-che-7-is-coming-and-its-really-hot-4-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%284%2F4%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Feclipse-che-7-is-coming-and-its-really-hot-4-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%284%2F4%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Feclipse-che-7-is-coming-and-its-really-hot-4-4%2F&amp;#038;title=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%284%2F4%29" data-a2a-url="https://developers.redhat.com/blog/2018/12/21/eclipse-che-7-is-coming-and-its-really-hot-4-4/" data-a2a-title="Eclipse Che 7 is Coming and It’s Really Hot (4/4)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/21/eclipse-che-7-is-coming-and-its-really-hot-4-4/"&gt;Eclipse Che 7 is Coming and It’s Really Hot (4/4)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Ge3iukt0YyA" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Eclipse Che 7 is an enterprise-grade IDE that is designed to solve many of the challenges faced by enterprise development teams. In my previous articles, I covered the main focus areas for Eclipse Che 7, the new plugin model, and kube-native developer workspaces. This article explains security and management of Eclipse Che 7 in enterprise deployment scenarios [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/21/eclipse-che-7-is-coming-and-its-really-hot-4-4/"&gt;Eclipse Che 7 is Coming and It’s Really Hot (4/4)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/12/21/eclipse-che-7-is-coming-and-its-really-hot-4-4/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">551067</post-id><dc:creator>Stevan LeMeur</dc:creator><dc:date>2018-12-21T17:53:02Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/21/eclipse-che-7-is-coming-and-its-really-hot-4-4/</feedburner:origLink></entry><entry><title>Monitoring Node.js Applications on OpenShift with Prometheus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/41n7xy6i-Ks/" /><category term="Containers" /><category term="JavaScript" /><category term="Kubernetes" /><category term="Microservices" /><category term="Modern App Dev" /><category term="Node.js" /><category term="Red Hat OpenShift Application Runtimes" /><category term="containers" /><category term="instrumentation" /><category term="kubernetes" /><category term="microservices" /><category term="monitoring" /><category term="node" /><category term="OpenShift Enterprise by Red Hat" /><category term="prometheus" /><category term="Red Hat OpenShift" /><category term="RHOAR" /><author><name>Lance Ball</name></author><id>https://developers.redhat.com/blog/?p=548027</id><updated>2018-12-21T13:00:43Z</updated><published>2018-12-21T13:00:43Z</published><content type="html">&lt;h2&gt;Observability is Key&lt;/h2&gt; &lt;p&gt;One of the great things about Node.js is how well it performs in a &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;container&lt;/a&gt;. Its fast start up time, and relatively small size make it a favorite for microservice applications on &lt;a href="https://www.openshift.com/"&gt;OpenShift&lt;/a&gt;. But with this shift to containerized deployments comes some complexity. As a result, monitoring Node.js applications can be difficult. At times it seems as though the performance and behavior of our applications become opaque to us. So what can we do to find and address issues in our services before they become a problem? We need to &lt;strong&gt;enhance observability&lt;/strong&gt; by monitoring the state of our services.&lt;/p&gt; &lt;h2&gt;Instrumentation&lt;/h2&gt; &lt;p&gt;Instrumentation of our applications is one way to increase observability. Therefore, in this article, I will demonstrate the instrumentation of a Node.js application using &lt;a href="https://prometheus.io/" target="_blank" rel="noopener"&gt;Prometheus&lt;/a&gt;.&lt;span id="more-548027"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Prometheus is an installable service which gathers instrumentation metrics from your applications and stores them as time-series data. For online services, such as an &lt;a href="https://expressjs.com" target="_blank" rel="noopener"&gt;Express.js&lt;/a&gt; application, the metrics we most care about are throughput, errors and latency. Your application is responsible for exposing these metrics to the Prometheus system. Therefore, using the &lt;code&gt;prom-client&lt;/code&gt; NPM module, we will instrument a small Express.js application and expose those metrics for consumption by Prometheus.&lt;/p&gt; &lt;h3&gt;A Simple Express.js App&lt;/h3&gt; &lt;p&gt;Let&amp;#8217;s start by creating a simple Express.js application. In this application we have a service endpoint at &lt;code&gt;/api/greeting&lt;/code&gt; which will accept either &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt; requests, and returns a greeting as &lt;code&gt;JSON&lt;/code&gt;. The following commands will get your project started.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ mkdir myapp $ cd myapp $ npm init -y $ npm install --save express body-parser prom-client &lt;/pre&gt; &lt;p&gt;This should create a &lt;code&gt;package.json&lt;/code&gt; file for you and install all of the application dependencies. Next, open the &lt;code&gt;package.json&lt;/code&gt; file in a text editor and add the following to the &lt;code&gt;scripts&lt;/code&gt; section: &lt;code&gt;"start": "node myapp.js"&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Default and Custom Instrumentation&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;prom-client&lt;/code&gt; module exposes all of the &lt;a href="https://prometheus.io/docs/instrumenting/writing_clientlibs/#standard-and-runtime-collectors" target="_blank" rel="noopener"&gt;default metrics&lt;/a&gt; recommended by Prometheus itself. Follow the link to read more about these. The defaults include metrics such as &lt;code&gt;process_cpu_seconds_total&lt;/code&gt; and &lt;code&gt;process_heap_bytes&lt;/code&gt;, for example. In addition to exposing these default metrics, &lt;code&gt;prom-client&lt;/code&gt; also allows developers to define their own metrics, shown in the code below.&lt;/p&gt; &lt;h3&gt;Application Source Code&lt;/h3&gt; &lt;p&gt;The application code is a fairly simple Express application. Create a new file in your text editor called &lt;code&gt;myapp.js&lt;/code&gt; and paste the following code in it.&lt;/p&gt; &lt;pre class="brush: jscript; title: ; notranslate"&gt; 'use strict'; const express = require('express'); const bodyParser = require('body-parser'); // Use the prom-client module to expose our metrics to Prometheus const client = require('prom-client'); // enable prom-client to expose default application metrics const collectDefaultMetrics = client.collectDefaultMetrics; // define a custom prefix string for application metrics collectDefaultMetrics({ prefix: 'my_application:' }); // a custom histogram metric which represents the latency // of each call to our API /api/greeting. const histogram = new client.Histogram({ name: 'my_application:hello_duration', help: 'Duration of HTTP requests in ms', labelNames: ['method', 'status_code'], buckets: [0.1, 5, 15, 50, 100, 500] }); // create the express application const app = express(); const port = process.argv[2] || 8080; app.use(bodyParser.json()); app.use(bodyParser.urlencoded({extended: false})); // our API app.use('/api/greeting', (request, response) =&amp;#62; { // start the timer for our custom metric - this returns a function // called later to stop the timer const end = histogram.startTimer(); const name = request.query.name ? request.query.name : 'World'; response.send({content: `Hello, ${name}!`}); // stop the timer end({ method: request.method, 'status_code': 200 }); }); // expose our metrics at the default URL for Prometheus app.get('/metrics', (request, response) =&amp;#62; { response.set('Content-Type', client.register.contentType); response.send(client.register.metrics()); }); app.listen(port, () =&amp;#62; console.log(`Hello world app listening on port ${port}!`)); &lt;/pre&gt; &lt;p&gt;In the source file above, we create a custom &lt;code&gt;histogram&lt;/code&gt; metric on line 16, which we use to calculate the latency of our application. Next, in the API route &lt;code&gt;/api/greeting&lt;/code&gt; we start the metric&amp;#8217;s timer as the first action on line 33. Then, we stop the timer after completing the request on line 37.&lt;/p&gt; &lt;h3&gt;Installing the Application&lt;/h3&gt; &lt;p&gt;You can install this application in OpenShift by running the following command.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ npx nodeshift --strictSSL=false --expose &lt;/pre&gt; &lt;p&gt;This will create all of the necessary OpenShift objects required to build, run and expose an external route to your application. After the deployment completes, you can browse to your newly deployed application. You can view the Prometheus metrics at the &lt;code&gt;/metrics&lt;/code&gt; path, or visit &lt;code&gt;/api/greeting&lt;/code&gt; to see this exciting API in action! From the command line, you can get the URL for your newly deployed app with the following command.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ oc get -o template route myapp --template=&amp;#34;http://{{.spec.host}}/api/greeting&amp;#34; &lt;/pre&gt; &lt;p&gt;If all is good, you&amp;#8217;ll see something like this in your browser: &lt;code&gt;{"content":"Hello, World!"}&lt;/code&gt;. Now get the URL for the Prometheus metrics your application is exposing with this command.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ oc get -o template route myapp --template=&amp;#34;http://{{.spec.host}}/metrics&amp;#34; &lt;/pre&gt; &lt;h2&gt;Install Prometheus&lt;/h2&gt; &lt;p&gt;OpenShift comes with a Prometheus instance already available. However, this instance has been optimized for instrumentation of the Kubernetes system itself. As a result, for our purposes, we will install a standalone Prometheus server in our OpenShift project and point it at our application.&lt;/p&gt; &lt;p&gt;Fortunately for us, the OpenShift developers have provided &lt;a href="https://github.com/openshift/origin/tree/master/examples/prometheus" target="_blank" rel="noopener"&gt;some templates&lt;/a&gt; to make Prometheus installation on OpenShift relatively pain free.&lt;/p&gt; &lt;h3&gt;Prometheus Configuration Files&lt;/h3&gt; &lt;p&gt;The OpenShift Prometheus templates depend on a couple of configuration files stored as Kubernetes secrets. Therefore, before installing Prometheus we need to be sure that our cluster contains the correct configuration files for the installation. These are &lt;code&gt;prometheus.yml&lt;/code&gt; and &lt;code&gt;alertmanager.yml&lt;/code&gt;. Ours look like this.&lt;/p&gt; &lt;p&gt;&lt;b&gt;&lt;code&gt;prometheus.yml&lt;/code&gt;&lt;/b&gt;&lt;/p&gt; &lt;pre&gt;global: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configuration alerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # A scrape configuration containing exactly one endpoint to scrape: # Here it's Prometheus itself. scrape_configs: # The job name is added as a label `job=` to any timeseries scraped from this config. - job_name: 'prometheus' # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: ['localhost:9090'] # Scrape configuration for our hello world app - job_name: 'myapp' static_configs: - targets: ['myapp:8080'] &lt;/pre&gt; &lt;p&gt;&lt;b&gt;&lt;code&gt;alertmanager.yml&lt;/code&gt;&lt;/b&gt;&lt;/p&gt; &lt;pre&gt;global: # The root route on which each incoming alert enters. route: # default route if none match receiver: alert-buffer-wh receivers: - name: alert-buffer-wh webhook_configs: - url: http://localhost:9099/topics/alerts &lt;/pre&gt; &lt;p&gt;Most of this is just boilerplate, but if you look at the bottom of &lt;code&gt;prometheus.yml&lt;/code&gt;, you can see the part that matters. This is where we inform Prometheus of our new application &lt;code&gt;myapp&lt;/code&gt;. We are telling Prometheus that it can be discovered on port 8080 of the &lt;code&gt;myapp&lt;/code&gt; service. Recall we are serving metrics at the &lt;code&gt;/metrics&lt;/code&gt; endpoint. This is the default value which Prometheus expects.&lt;/p&gt; &lt;h3&gt;Add Configuration Secrets and Deploy&lt;/h3&gt; &lt;p&gt;We will use Kubernetes secrets to store these files, and the Prometheus instance created by the template will know where to find them. After you have created the configuration files on your local filesystem, be sure you are logged in to OpenShift. Then type the following to add the files themselves and the Prometheus system to your project.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; # Create the prom secret $ oc create secret generic prom --from-file=prometheus.yml # Create the prom-alerts secret $ oc create secret generic prom-alerts --from-file=alertmanager.yml # Create the prometheus instance $ oc process -f https://raw.githubusercontent.com/openshift/origin/master/examples/prometheus/prometheus-standalone.yaml | oc apply -f - &lt;/pre&gt; &lt;p&gt;Once the Prometheus system has been fully deployed and started, you can browse to the Prometheus dashboard to see some metrics! The URL for the Prometheus dashboard in shown in the OpenShift Console. If everything has deployed correctly, you should see a screen similar to this.&lt;/p&gt; &lt;div id="attachment_548447" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img class="size-large wp-image-548447" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.07.12-AM-1024x610.png" alt="" width="640" height="381" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.07.12-AM-1024x610.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.07.12-AM-300x179.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.07.12-AM-768x457.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p class="wp-caption-text"&gt;The OpenShift console shows deployments and routes to your applications&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Browse the Prometheus Dashboard&lt;/h3&gt; &lt;p&gt;If you prefer the command line, you can type &lt;code&gt;oc get -o template route prom --template="http://{{.spec.host}}"&lt;/code&gt; to get a route to the Prometheus deployment. When first browsing the Prometheus application, you&amp;#8217;ll need to login. Simply use the OpenShift credentials that you used to login to the console. After that, click the &lt;code&gt;Status&lt;/code&gt; menu item, and select &lt;code&gt;Targets&lt;/code&gt;. This will show you what services your Prometheus instance is configured to scrape. If you have done everything correctly, you will see a screen like this.&lt;/p&gt; &lt;div id="attachment_548437" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img class=" size-large wp-image-548437 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.05.40-AM-1024x586.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.05.40-AM-1024x586.png" alt="" width="640" height="366" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.05.40-AM-1024x586.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.05.40-AM-300x172.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.05.40-AM-768x440.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p class="wp-caption-text"&gt;Prometheus Targets&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The first configuration is for Prometheus to scrape itself! The second configuration is our application &lt;code&gt;myapp&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Test Your Deployment by Adding Load&lt;/h3&gt; &lt;p&gt;Next, let&amp;#8217;s generate some load on our application using &lt;a href="https://httpd.apache.org/docs/2.4/programs/ab.html"&gt;Apache &lt;code&gt;ab&lt;/code&gt;&lt;/a&gt; in order to get some data into Prometheus. For example, here I am hitting the API 500,000 times with 100 concurrent requests at a time.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ ab -n 500000 -c 100 http://myapp-myproject.192.168.99.100.nip.io/api/greeting &lt;/pre&gt; &lt;p&gt;After generating load, we can go back to the main Prometheus dashboard screen and construct a simple query to see how our service performed during this test. We will use our custom &lt;code&gt;hello_duration&lt;/code&gt; metric to measure latency. Type this query into the textbox.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; my_application:hello_duration_sum / my_application:hello_duration_count &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can experiment with other metrics that Prometheus gathers to explore other measurements that might be meaningful for your application. For example, in the simple example above, Prometheus provides this graph.&lt;/p&gt; &lt;p&gt;&lt;img class=" size-large wp-image-548497 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.52.09-AM-1024x660.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.52.09-AM-1024x660.png" alt="Monitoring a Node.js application with Prometheus" width="640" height="413" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.52.09-AM-1024x660.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.52.09-AM-300x193.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screen-Shot-2018-12-13-at-10.52.09-AM-768x495.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;As you can see, the actual code required to instrument your services is relatively simple and not too verbose. But when we begin to instrument our applications there is a bit of infrastructure set up required. In addition, some thought must go into what is the most relevant information for your services and circumstances. I encourage you to give this tutorial a try and let me know what queries you find useful!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fmonitoring-node-js-applications-on-openshift-with-prometheus%2F&amp;#38;linkname=Monitoring%20Node.js%20Applications%20on%20OpenShift%20with%20Prometheus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fmonitoring-node-js-applications-on-openshift-with-prometheus%2F&amp;#38;linkname=Monitoring%20Node.js%20Applications%20on%20OpenShift%20with%20Prometheus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fmonitoring-node-js-applications-on-openshift-with-prometheus%2F&amp;#38;linkname=Monitoring%20Node.js%20Applications%20on%20OpenShift%20with%20Prometheus" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fmonitoring-node-js-applications-on-openshift-with-prometheus%2F&amp;#38;linkname=Monitoring%20Node.js%20Applications%20on%20OpenShift%20with%20Prometheus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fmonitoring-node-js-applications-on-openshift-with-prometheus%2F&amp;#38;linkname=Monitoring%20Node.js%20Applications%20on%20OpenShift%20with%20Prometheus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fmonitoring-node-js-applications-on-openshift-with-prometheus%2F&amp;#38;linkname=Monitoring%20Node.js%20Applications%20on%20OpenShift%20with%20Prometheus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fmonitoring-node-js-applications-on-openshift-with-prometheus%2F&amp;#38;linkname=Monitoring%20Node.js%20Applications%20on%20OpenShift%20with%20Prometheus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fmonitoring-node-js-applications-on-openshift-with-prometheus%2F&amp;#38;linkname=Monitoring%20Node.js%20Applications%20on%20OpenShift%20with%20Prometheus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fmonitoring-node-js-applications-on-openshift-with-prometheus%2F&amp;#038;title=Monitoring%20Node.js%20Applications%20on%20OpenShift%20with%20Prometheus" data-a2a-url="https://developers.redhat.com/blog/2018/12/21/monitoring-node-js-applications-on-openshift-with-prometheus/" data-a2a-title="Monitoring Node.js Applications on OpenShift with Prometheus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/21/monitoring-node-js-applications-on-openshift-with-prometheus/"&gt;Monitoring Node.js Applications on OpenShift with Prometheus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/41n7xy6i-Ks" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Observability is Key One of the great things about Node.js is how well it performs in a container. Its fast start up time, and relatively small size make it a favorite for microservice applications on OpenShift. But with this shift to containerized deployments comes some complexity. As a result, monitoring Node.js applications can be difficult. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/21/monitoring-node-js-applications-on-openshift-with-prometheus/"&gt;Monitoring Node.js Applications on OpenShift with Prometheus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/12/21/monitoring-node-js-applications-on-openshift-with-prometheus/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">548027</post-id><dc:creator>Lance Ball</dc:creator><dc:date>2018-12-21T13:00:43Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/21/monitoring-node-js-applications-on-openshift-with-prometheus/</feedburner:origLink></entry><entry><title>Using Kubernetes readiness and liveness probes for health checks with ASP.NET Core 2.2 on OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/z9wMZKNHdZk/" /><category term=".NET Core" /><category term="C#" /><category term="Kubernetes" /><category term="Red Hat OpenShift Application Runtimes" /><category term="Red Hat OpenShift Container Platform" /><category term=".NET Core 2.2" /><category term="ASP.NET Core" /><category term="health checks" /><category term="Health Checks API" /><category term="kubernetes" /><category term="liveness" /><category term="OpenShift Enterprise by Red Hat" /><category term="probes" /><category term="readiness" /><author><name>Takayoshi Tanaka</name></author><id>https://developers.redhat.com/blog/?p=545477</id><updated>2018-12-21T12:00:45Z</updated><published>2018-12-21T12:00:45Z</published><content type="html">&lt;p&gt;&lt;a href="https://blogs.msdn.microsoft.com/webdev/2018/12/04/asp-net-core-2-2-available-today/" target="_blank" rel="noopener"&gt;.NET Core 2.2 has been released&lt;/a&gt;. You can &lt;a href="https://developers.redhat.com/blog/2018/12/05/announcing-net-core-2-2-for-red-hat-platforms/" target="_blank" rel="noopener"&gt;try it on Red Hat Enterprise Linux (RHEL) and OpenShift&lt;/a&gt;. One of the new features of ASP.NET Core is the &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-2.2" target="_blank" rel="noopener"&gt;Health Checks API&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this article, which was written for &lt;a href="https://crosscuttingconcerns.com/The-Second-Annual-C-Advent" target="_blank" rel="noopener"&gt;C# Advent Calendar 2018&lt;/a&gt;, I show an example of how the API works with &lt;a href="http://openshift.com/"&gt;OpenShift&lt;/a&gt; by implementing two health checks for the &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/" target="_blank" rel="noopener"&gt;Kubernetes liveness and readiness probes&lt;/a&gt;. Since OpenShift includes &lt;a href="https://developers.redhat.com/blog/category/kubernetes/"&gt;Kubernetes&lt;/a&gt;, this example also works well with Kubernetes.&lt;/p&gt; &lt;p&gt;&lt;span id="more-545477"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Example code&lt;/h2&gt; &lt;p&gt;This new Health Checks API quite works well with Kubernetes liveness and readiness probes. These probes are &lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/application_health.html" target="_blank" rel="noopener"&gt;available in OpenShift&lt;/a&gt;, too.&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/tanaka-takayoshi/HealthCheckExample" target="_blank" rel="noopener"&gt;Here&lt;/a&gt; is my example application to explain the Health Checks API.&lt;/p&gt; &lt;p&gt;And below is an example of configuring two health checks: one for the liveness probe and one for the readiness probe.&lt;/p&gt; &lt;pre&gt;public void ConfigureServices(IServiceCollection services) { ... services.AddHealthChecks() .AddCheck("Liveness", failureStatus: null) .AddCheck("Readiness", failureStatus: null); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { ... app.UseHealthChecks("/health/live", new HealthCheckOptions() { Predicate = check =&amp;#62; check.Name == "Liveness" }); app.UseHealthChecks("/health/ready", new HealthCheckOptions() { Predicate = check =&amp;#62; check.Name == "Readiness", }); ... } &lt;/pre&gt; &lt;p&gt;In the &lt;code&gt;ConfigureServices&lt;/code&gt; method, you can enable health checks and add as many checks as you want. &lt;code&gt;LivenessHealthCheck&lt;/code&gt; and &lt;code&gt;ReadinessHealthCheck&lt;/code&gt; are the classes that define how to check the application&amp;#8217;s health in this project. I&amp;#8217;ll show you these classes later.&lt;/p&gt; &lt;p&gt;In the &lt;code&gt;Configure&lt;/code&gt; method, you can define which health checks are responsible for the specified path. In my example, the health check whose name is &lt;code&gt;Liveness&lt;/code&gt; is executed for &lt;code&gt;/health/live&lt;/code&gt; and the health check whose name is &lt;code&gt;Readiness&lt;/code&gt; is executed for &lt;code&gt;/health/ready&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Below is an example implementation of the &lt;code&gt;LivenessHealthCheck&lt;/code&gt; class. You can return the application&amp;#8217;s health status in the &lt;code&gt;CheckHealthAsync&lt;/code&gt; method. My example returns &lt;code&gt;Unhealth&lt;/code&gt; when the application status defined in &lt;code&gt;HealthStatusData.IsLiveness&lt;/code&gt; is false. This status can be updated by the &lt;code&gt;POST&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_659.png"&gt;&lt;img class=" aligncenter wp-image-545517 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_659.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_659.png" alt="Example implementation of the LivenessHealthCheck class" width="837" height="340" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_659.png 837w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_659-300x122.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_659-768x312.png 768w" sizes="(max-width: 837px) 100vw, 837px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;For more details, please refer to the &lt;a href="https://github.com/tanaka-takayoshi/HealthCheckExample/blob/master/HealthCheckExample/Pages/Index.cshtml.cs" target="_blank" rel="noopener"&gt;code&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;internal class LivenessHealthCheck : IHealthCheck { private HealthStatusData data; public LivenessHealthCheck(HealthStatusData data) { this.data = data; } public Task CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default(CancellationToken)) { if (data.IsLiveness) { return Task.FromResult(HealthCheckResult.Healthy()); } else { return Task.FromResult(HealthCheckResult.Unhealthy("Error")); } } } &lt;/pre&gt; &lt;h2&gt;Working with OpenShift&lt;/h2&gt; &lt;p&gt;My example code can be run on a local machine. However, you can try it with Kubernetes or OpenShift. If you want to try it with OpenShift, please import the ASP.NET Core 2.2 s2i image by following &lt;a href="https://access.redhat.com/documentation/en-us/net_core/2.2/html-single/getting_started_guide/#gs_dotnet_on_openshift" target="_blank" rel="noopener"&gt;this document&lt;/a&gt;. After importing the .NET Core 2.2 s2i image, you can deploy my app to your cluster, as follows:&lt;/p&gt; &lt;pre&gt;$ oc new-project aspnetcore22 $ oc new-app --name=healthcheckexample 'dotnet:2.2~https://github.com/tanaka-takayoshi/HealthCheckExample.git' --build-env DOTNET_STARTUP_PROJECT=HealthCheckExample $ oc expose svc/healthcheckexample &lt;/pre&gt; &lt;p&gt;After the deployment configuration is created, you can enable health checks in the OpenShift web console.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_660.png"&gt;&lt;img class=" aligncenter wp-image-545507 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_660-1024x518.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_660-1024x518.png" alt="Enable health checks in the OpenShift web console" width="640" height="324" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_660-1024x518.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_660-300x152.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_660-768x389.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If you edit the &lt;code&gt;deploymentconfig&lt;/code&gt; YAML file, the probes should be the following.&lt;/p&gt; &lt;pre&gt;spec: ... template: ... spec: containers: - image: &amp;#62;- ... livenessProbe: failureThreshold: 3 httpGet: path: /health/live port: 8080 scheme: HTTP periodSeconds: 10 successThreshold: 1 timeoutSeconds: 1 readinessProbe: failureThreshold: 3 httpGet: path: /health/ready port: 8080 scheme: HTTP periodSeconds: 10 successThreshold: 1 timeoutSeconds: 1 ... &lt;/pre&gt; &lt;p&gt;Now, here is the application status in the web console.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_662.png"&gt;&lt;img class=" aligncenter wp-image-545537 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_662-1024x594.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_662-1024x594.png" alt="Application status in the web console" width="640" height="371" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_662-1024x594.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_662-300x174.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_662-768x446.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_662.png 1299w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;First, let&amp;#8217;s make the readiness probe unhealthy. Soon after that, you can see in the monitoring page of the web console that the readiness check has failed.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_669.png"&gt;&lt;img class=" aligncenter wp-image-545587 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_669-1024x602.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_669-1024x602.png" alt="Web console showing that the Readiness check failed" width="640" height="376" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_669-1024x602.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_669-300x176.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_669-768x451.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_669.png 1290w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;br /&gt; &lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_666.png"&gt;&lt;img class=" aligncenter wp-image-545557 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_666-1024x250.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_666-1024x250.png" alt="Web console sowing that the Readiness check failed" width="640" height="156" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_666-1024x250.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_666-300x73.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_666-768x188.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_666.png 1064w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;You can see the same thing by using the &lt;code&gt;oc get event -w&lt;/code&gt; command.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_667.png"&gt;&lt;img class=" aligncenter wp-image-545567 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_667-1024x28.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_667-1024x28.png" alt="oc get event -w command showing that the Readiness check failed" width="640" height="18" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_667-1024x28.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_667-300x8.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_667-768x21.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;When the readiness check fails, the pod is still running but it stops routing the traffic. Since this application has only one pod, you can&amp;#8217;t access the application.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_668.png"&gt;&lt;img class=" aligncenter wp-image-545577 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_668-1024x299.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_668-1024x299.png" alt="Message showing the application is not available" width="640" height="187" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_668-1024x299.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_668-300x88.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_668-768x224.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_668.png 1272w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;You can easily scale up this application by clicking the upper arrow next to the number of the pods.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_670.png"&gt;&lt;img class=" aligncenter wp-image-545597 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_670-1024x607.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_670-1024x607.png" alt="You can scale up the application " width="640" height="379" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_670-1024x607.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_670-300x178.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_670-768x455.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_670.png 1300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Now, since one of the two pods is healthy, you can access the application.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_671.png"&gt;&lt;img class=" aligncenter wp-image-545607 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_671.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_671.png" alt="One of the pods is healthy, so you can access the application" width="667" height="76" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_671.png 667w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_671-300x34.png 300w" sizes="(max-width: 667px) 100vw, 667px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Next, scale down the app to one pod and make the liveness probe unhealthy.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_672.png"&gt;&lt;img class=" aligncenter wp-image-545617 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_672-1024x183.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_672-1024x183.png" alt="Scale down the app to one pod and make the Liveness probe unhealthy" width="640" height="114" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_672-1024x183.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_672-300x54.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_672-768x137.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_672.png 1063w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;br /&gt; &lt;img class=" aligncenter wp-image-545627 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_673.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_673-300x35.png" alt="" width="300" height="35" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_673-300x35.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_673.png 669w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;When the liveness probe fails, the pod is killed and a new one is created. You can see the sequence of events.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_674.png"&gt;&lt;img class=" aligncenter wp-image-545637 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_674-1024x563.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_674-1024x563.png" alt="Sequence of events after Liveness probe fails" width="640" height="352" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_674-1024x563.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_674-300x165.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_674-768x422.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_674.png 1044w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-545647 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_675-1024x143.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_675-300x42.png" alt="" width="300" height="42" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_675-300x42.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_675-768x107.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Selection_675-1024x143.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;In this article, I described how the Health Checks API in ASP.NET Core 2.2 works with OpenShift (Kubernetes) probes. You can define your appropriate logic in a class that implements the &lt;code&gt;IHealthCheck&lt;/code&gt; interface. The readiness probe can be used when the pod is ready to serve the request. The liveness probe can be used when the pod is running.&lt;/p&gt; &lt;h2&gt;Other resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/05/announcing-net-core-2-2-for-red-hat-platforms/"&gt;Announcing .NET Core 2.2 for Red Hat Platforms&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/07/05/deploy-dotnet-core-apps-openshift/"&gt;Using OpenShift to deploy .NET Core applications&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/13/building-net-core-container-images-using-s2i/"&gt;Building .NET Core container images using S2I&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?s=dotnet"&gt;Other .Net Core articles on the Red Hat Developer blog&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fasp_dotnet_core_kubernetes_health_check_openshift%2F&amp;#38;linkname=Using%20Kubernetes%20readiness%20and%20liveness%20probes%20for%20health%20checks%20with%20ASP.NET%20Core%202.2%20on%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fasp_dotnet_core_kubernetes_health_check_openshift%2F&amp;#38;linkname=Using%20Kubernetes%20readiness%20and%20liveness%20probes%20for%20health%20checks%20with%20ASP.NET%20Core%202.2%20on%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fasp_dotnet_core_kubernetes_health_check_openshift%2F&amp;#38;linkname=Using%20Kubernetes%20readiness%20and%20liveness%20probes%20for%20health%20checks%20with%20ASP.NET%20Core%202.2%20on%20OpenShift" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fasp_dotnet_core_kubernetes_health_check_openshift%2F&amp;#38;linkname=Using%20Kubernetes%20readiness%20and%20liveness%20probes%20for%20health%20checks%20with%20ASP.NET%20Core%202.2%20on%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fasp_dotnet_core_kubernetes_health_check_openshift%2F&amp;#38;linkname=Using%20Kubernetes%20readiness%20and%20liveness%20probes%20for%20health%20checks%20with%20ASP.NET%20Core%202.2%20on%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fasp_dotnet_core_kubernetes_health_check_openshift%2F&amp;#38;linkname=Using%20Kubernetes%20readiness%20and%20liveness%20probes%20for%20health%20checks%20with%20ASP.NET%20Core%202.2%20on%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fasp_dotnet_core_kubernetes_health_check_openshift%2F&amp;#38;linkname=Using%20Kubernetes%20readiness%20and%20liveness%20probes%20for%20health%20checks%20with%20ASP.NET%20Core%202.2%20on%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fasp_dotnet_core_kubernetes_health_check_openshift%2F&amp;#38;linkname=Using%20Kubernetes%20readiness%20and%20liveness%20probes%20for%20health%20checks%20with%20ASP.NET%20Core%202.2%20on%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F21%2Fasp_dotnet_core_kubernetes_health_check_openshift%2F&amp;#038;title=Using%20Kubernetes%20readiness%20and%20liveness%20probes%20for%20health%20checks%20with%20ASP.NET%20Core%202.2%20on%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2018/12/21/asp_dotnet_core_kubernetes_health_check_openshift/" data-a2a-title="Using Kubernetes readiness and liveness probes for health checks with ASP.NET Core 2.2 on OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/21/asp_dotnet_core_kubernetes_health_check_openshift/"&gt;Using Kubernetes readiness and liveness probes for health checks with ASP.NET Core 2.2 on OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/z9wMZKNHdZk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;.NET Core 2.2 has been released. You can try it on Red Hat Enterprise Linux (RHEL) and OpenShift. One of the new features of ASP.NET Core is the Health Checks API. In this article, which was written for C# Advent Calendar 2018, I show an example of how the API works with OpenShift by implementing two health [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/21/asp_dotnet_core_kubernetes_health_check_openshift/"&gt;Using Kubernetes readiness and liveness probes for health checks with ASP.NET Core 2.2 on OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/12/21/asp_dotnet_core_kubernetes_health_check_openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">545477</post-id><dc:creator>Takayoshi Tanaka</dc:creator><dc:date>2018-12-21T12:00:45Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/21/asp_dotnet_core_kubernetes_health_check_openshift/</feedburner:origLink></entry><entry><title>Eco-Friendly Machine Learning: How the Kubeflow Ecosystem Bootstrapped Itself</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3cXjfNJEZCE/" /><category term="Kubernetes" /><category term="Machine Learning" /><category term="Developer Events" /><category term="kubecon" /><category term="kubecon 2018" /><category term="kubernetes" /><category term="machine learning" /><category term="video" /><author><name>David Millsaps</name></author><id>https://developers.redhat.com/blog/?p=550387</id><updated>2018-12-21T01:09:25Z</updated><published>2018-12-21T01:09:25Z</published><content type="html">&lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/EVSfp8HGJXY?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;KubeCon 2018: Eco-Friendly ML: How the Kubeflow Ecosystem Bootstrapped Itself &amp;#8211; Peter MacKinnon, Red Hat&lt;/p&gt; &lt;p&gt;How do you bootstrap an open source project that aims to provide stability, composability, and portability for machine learning? You use Kubernetes and its rich ecosystem to implement the pieces of infrastructure that you need to deliver a comprehensive ML platform for data scientists and DevOps engineers alike. This talk will explore the various integrations that have enabled Kubeflow to quickly emerge as the de-facto machine learning toolkit for Kubernetes. We&amp;#8217;ll look in detail at not only how Kubeflow leverages Ambassador, Argo, Ksonnet, and JupyterHub, but also examine integration with complementary projects such as Pachyderm and SeldonIO. You will leave this talk with a better understanding and inspiration of how a particular project can rapidly achieve its potential by working with other projects, and that those inter-project collaborations enrich the entire Kubernetes community.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself%2F&amp;#38;linkname=Eco-Friendly%20Machine%20Learning%3A%20How%20the%20Kubeflow%20Ecosystem%20Bootstrapped%20Itself" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself%2F&amp;#38;linkname=Eco-Friendly%20Machine%20Learning%3A%20How%20the%20Kubeflow%20Ecosystem%20Bootstrapped%20Itself" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself%2F&amp;#38;linkname=Eco-Friendly%20Machine%20Learning%3A%20How%20the%20Kubeflow%20Ecosystem%20Bootstrapped%20Itself" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself%2F&amp;#38;linkname=Eco-Friendly%20Machine%20Learning%3A%20How%20the%20Kubeflow%20Ecosystem%20Bootstrapped%20Itself" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself%2F&amp;#38;linkname=Eco-Friendly%20Machine%20Learning%3A%20How%20the%20Kubeflow%20Ecosystem%20Bootstrapped%20Itself" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself%2F&amp;#38;linkname=Eco-Friendly%20Machine%20Learning%3A%20How%20the%20Kubeflow%20Ecosystem%20Bootstrapped%20Itself" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself%2F&amp;#38;linkname=Eco-Friendly%20Machine%20Learning%3A%20How%20the%20Kubeflow%20Ecosystem%20Bootstrapped%20Itself" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself%2F&amp;#38;linkname=Eco-Friendly%20Machine%20Learning%3A%20How%20the%20Kubeflow%20Ecosystem%20Bootstrapped%20Itself" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself%2F&amp;#038;title=Eco-Friendly%20Machine%20Learning%3A%20How%20the%20Kubeflow%20Ecosystem%20Bootstrapped%20Itself" data-a2a-url="https://developers.redhat.com/blog/2018/12/20/eco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself/" data-a2a-title="Eco-Friendly Machine Learning: How the Kubeflow Ecosystem Bootstrapped Itself"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/20/eco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself/"&gt;Eco-Friendly Machine Learning: How the Kubeflow Ecosystem Bootstrapped Itself&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3cXjfNJEZCE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;KubeCon 2018: Eco-Friendly ML: How the Kubeflow Ecosystem Bootstrapped Itself &amp;#8211; Peter MacKinnon, Red Hat How do you bootstrap an open source project that aims to provide stability, composability, and portability for machine learning? You use Kubernetes and its rich ecosystem to implement the pieces of infrastructure that you need to deliver a comprehensive ML [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/20/eco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself/"&gt;Eco-Friendly Machine Learning: How the Kubeflow Ecosystem Bootstrapped Itself&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/12/20/eco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">550387</post-id><dc:creator>David Millsaps</dc:creator><dc:date>2018-12-21T01:09:25Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/20/eco-friendly-machine-learning-how-the-kubeflow-ecosystem-bootstrapped-itself/</feedburner:origLink></entry><entry><title>Eclipse Che 7 is Coming and It’s Really Hot (3/4)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lVx1u2uTxA4/" /><category term="Cloud" /><category term="CodeReady Workspaces" /><category term="Community" /><category term="Developer Tools" /><category term="Eclipse Che" /><category term="Kubernetes" /><category term="cloud" /><category term="cloud native development" /><category term="kubernetes" /><author><name>Stevan LeMeur</name></author><id>https://developers.redhat.com/blog/?p=550817</id><updated>2018-12-20T22:30:52Z</updated><published>2018-12-20T22:30:52Z</published><content type="html">&lt;p&gt;With a new workspaces model and full “dev-mode” for application runtimes—Eclipse Che the first kube-native IDE!&lt;/p&gt; &lt;p&gt;In Part 1 of this series, I highlighted &lt;a href="https://developers.redhat.com/blog/2018/12/18/eclipse-che-7-coming-part-1/"&gt;&lt;em&gt;the&lt;/em&gt; main focus areas for Eclipse Che 7&lt;/a&gt;. Part 2 covered &lt;a href="https://developers.redhat.com/blog/2018/12/19/eclipse-che-7-is-coming-and-its-really-hot-2-4/"&gt;&lt;em&gt;the new plugin model&lt;/em&gt;&lt;/a&gt;. This article explains the different changes that have been introduced for Che workspaces, in order to provide full “dev-mode” capabilities on top of application runtimes by sidecaring developer tooling.&lt;/p&gt; &lt;h3 id="7709" class="graf graf--h3 graf-after--figure"&gt;Kubernetes native IDE&lt;/h3&gt; &lt;p id="d972" class="graf graf--p graf-after--h3"&gt;This new version of Eclipse Che makes it the first &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; native IDE.&lt;/p&gt; &lt;p id="5e33" class="graf graf--p graf-after--p"&gt;Developers using Eclipse Che use containers directly in their developer workspaces. Che workspaces provide a “dev mode” layer on top of the containers used in production, adding intellisense and IDE toolings.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/eclipse_che_workspace_next.png"&gt;&lt;img class=" aligncenter size-large wp-image-550837 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/eclipse_che_workspace_next-1024x507.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/eclipse_che_workspace_next-1024x507.png" alt="Eclipse Che Workspace.Next" width="640" height="317" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/eclipse_che_workspace_next-1024x507.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/eclipse_che_workspace_next-300x149.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/eclipse_che_workspace_next-768x380.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/eclipse_che_workspace_next.png 1400w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The work on Workspace.Next allows Che to use bare application definitions (a Docker image, a Composefile or a list of Kubernetes resources) without the need to patch them to inject the IDE services. With Workspace.Next, IDE toolings are &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt; packaged in their own sidecar containers, bringing their own dependencies and keeping application’s containers untouched. The execution of IDE toolings is isolated from each other and from the application’s containers too. Each IDE tool now gets its own lifecycle, the ability for easy upgrading or switching, and coming soon its own scalability mechanism.&lt;/p&gt; &lt;p&gt;To learn more, see the article: &lt;em&gt;&lt;a href="https://che.eclipse.org/the-new-superpowers-of-che-workspaces-243967a2010"&gt;The New Superpowers of Che Workspaces&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &lt;h3 id="6bd7" class="graf graf--h3 graf--leading"&gt;Try Eclipse Che 7 Now!&lt;/h3&gt; &lt;p id="8481" class="graf graf--p graf-after--h3"&gt;Want to try to the new version of Eclipse Che 7?  Here&amp;#8217;s how:&lt;/p&gt; &lt;p id="ca45" class="graf graf--p graf-after--p"&gt;&lt;strong class="markup--strong markup--p-strong"&gt;Click on &lt;/strong&gt;the following factory URL:&lt;/p&gt; &lt;p class="graf graf--p graf-after--p" style="padding-left: 30px;"&gt;&lt;a class="markup--anchor markup--p-anchor" href="https://che.openshift.io/f?id=factoryvbwekkducozn3jsn" target="_blank" rel="nofollow noopener noopener noopener noopener" data-href="https://che.openshift.io/f?id=factoryvbwekkducozn3jsn"&gt;https://che.openshift.io/f?id=factoryvbwekkducozn3jsn&lt;/a&gt;&lt;/p&gt; &lt;p id="b4c8" class="graf graf--p graf-after--p"&gt;&lt;strong class="markup--strong markup--p-strong"&gt;Or Create your account&lt;/strong&gt; on &lt;a class="markup--anchor markup--p-anchor" href="https://che.openshift.io/" target="_blank" rel="noopener" data-href="https://che.openshift.io"&gt;che.openshift.io&lt;/a&gt;, &lt;strong class="markup--strong markup--p-strong"&gt;create a new workspace&lt;/strong&gt; and select “Che 7” stack.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift.png"&gt;&lt;img class="aligncenter size-large wp-image-549977" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-1024x356.png" alt="Try Eclipse Che 7 on OpenShift" width="640" height="223" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-1024x356.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-300x104.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-768x267.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift.png 1294w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;You can also test on your local machine, by installing the latest version of Eclipse Che, See &lt;em&gt;&lt;a class="markup--anchor markup--p-anchor" href="http://www.eclipse.org/che/docs/#getting-started" target="_blank" rel="noopener" data-href="http://www.eclipse.org/che/docs/#getting-started"&gt;Quick Start with Eclipse Che&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &lt;h3 id="1953" class="graf graf--h3 graf--leading"&gt;Want to learn more?&lt;/h3&gt; &lt;p id="b78e" class="graf graf--p graf-after--h3"&gt;My articles about Eclipse Che 7:&lt;/p&gt; &lt;ul class="postList"&gt; &lt;li id="2127" class="graf graf--li graf-after--p"&gt;Part 1—&lt;a class="markup--anchor markup--li-anchor" href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-1-4-64d79b75ca02" target="_blank" rel="noopener" data-href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-1-4-64d79b75ca02"&gt;Eclipse Che 7 overview, and introducing the new IDE&lt;/a&gt;&lt;/li&gt; &lt;li id="07b2" class="graf graf--li graf-after--li"&gt;Part 2—&lt;a class="markup--anchor markup--li-anchor" href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-2-4-2e2c6accbff4" target="_blank" rel="noopener" data-href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-2-4-2e2c6accbff4"&gt;introducing the plugin model&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 3—&lt;a href="https://developers.redhat.com/blog/2018/12/20/eclipse-che-7-is-coming-and-its-really-hot-3-4/"&gt;Kube-native developer workspaces&lt;/a&gt; (this article)&lt;/li&gt; &lt;li&gt;Part 4—&lt;a href="https://developers.redhat.com/blog/2018/12/21/eclipse-che-7-is-coming-and-its-really-hot-4-4/"&gt;Functionality for Enterprise Development Teams and release timing&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p id="5fd1" class="graf graf--p graf-after--li graf--trailing"&gt;That’s it for the third article introducing Eclipse Che 7. Part 4 will cover the new &lt;strong class="markup--strong markup--p-strong"&gt;enterprise features and release schedule&lt;/strong&gt;.&lt;/p&gt; &lt;h2&gt;See also&lt;/h2&gt; &lt;p&gt;For information about Che running on Red Hat OpenShift, see &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;CodeReady WorkSpaces for OpenShift&lt;/a&gt; (currently in beta) and Doug Tidwell&amp;#8217;s article and videos, &lt;a href="https://developers.redhat.com/blog/2018/12/11/codeready-workspaces-openshift/"&gt;&lt;em&gt;CodeReady Workspaces for OpenShift (Beta)–It works on their machines too&lt;/em&gt;&lt;/a&gt;. Doug covers stacks, workspaces, and factories to help  you get started with Che.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feclipse-che-7-is-coming-and-its-really-hot-3-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%283%2F4%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feclipse-che-7-is-coming-and-its-really-hot-3-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%283%2F4%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feclipse-che-7-is-coming-and-its-really-hot-3-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%283%2F4%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feclipse-che-7-is-coming-and-its-really-hot-3-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%283%2F4%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feclipse-che-7-is-coming-and-its-really-hot-3-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%283%2F4%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feclipse-che-7-is-coming-and-its-really-hot-3-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%283%2F4%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feclipse-che-7-is-coming-and-its-really-hot-3-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%283%2F4%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feclipse-che-7-is-coming-and-its-really-hot-3-4%2F&amp;#38;linkname=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%283%2F4%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Feclipse-che-7-is-coming-and-its-really-hot-3-4%2F&amp;#038;title=Eclipse%20Che%207%20is%20Coming%20and%20It%E2%80%99s%20Really%20Hot%20%283%2F4%29" data-a2a-url="https://developers.redhat.com/blog/2018/12/20/eclipse-che-7-is-coming-and-its-really-hot-3-4/" data-a2a-title="Eclipse Che 7 is Coming and It’s Really Hot (3/4)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/20/eclipse-che-7-is-coming-and-its-really-hot-3-4/"&gt;Eclipse Che 7 is Coming and It&amp;#8217;s Really Hot (3/4)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lVx1u2uTxA4" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;With a new workspaces model and full “dev-mode” for application runtimes—Eclipse Che the first kube-native IDE! In Part 1 of this series, I highlighted the main focus areas for Eclipse Che 7. Part 2 covered the new plugin model. This article explains the different changes that have been introduced for Che workspaces, in order to provide [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/20/eclipse-che-7-is-coming-and-its-really-hot-3-4/"&gt;Eclipse Che 7 is Coming and It&amp;#8217;s Really Hot (3/4)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/12/20/eclipse-che-7-is-coming-and-its-really-hot-3-4/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">550817</post-id><dc:creator>Stevan LeMeur</dc:creator><dc:date>2018-12-20T22:30:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/20/eclipse-che-7-is-coming-and-its-really-hot-3-4/</feedburner:origLink></entry><entry><title>Integration of API management details (Part 4)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/tG0kys51Uz4/" /><category term="Containers" /><category term="Integration" /><category term="Microservices" /><category term="Modern App Dev" /><category term="Red Hat OpenShift Container Platform" /><category term="Agile Integration" /><category term="API-Management" /><category term="architecture" /><category term="cloud" /><category term="containers" /><category term="customer experience" /><category term="DevOps" /><category term="microservices" /><category term="Red Hat Customers" /><category term="Red Hat OpenShift" /><category term="reverse proxy" /><author><name>Eric D. Schabell</name></author><id>https://developers.redhat.com/blog/?p=546457</id><updated>2018-12-20T13:00:44Z</updated><published>2018-12-20T13:00:44Z</published><content type="html">&lt;p&gt;In &lt;a href="https://developers.redhat.com/blog/2018/12/14/integration-of-external-application-details-part-3/"&gt;Part 3 of this series&lt;/a&gt;, we started diving into the details that determine how your integration becomes the key to transforming your customer experience.&lt;/p&gt; &lt;p&gt;It started with laying out the process of how I&amp;#8217;ve approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it&amp;#8217;s time to cover various blueprint details.&lt;/p&gt; &lt;p&gt;This article takes you deeper into specific elements (&lt;i&gt;API management and reverse proxy)&lt;/i&gt; of the generic architectural overview.&lt;/p&gt; &lt;p&gt;&lt;span id="more-546457"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Architectural details&lt;/h2&gt; &lt;p&gt;As mentioned before, the architectural details covered here are based on real customer integration solutions using open source technologies. The elements presented here are then the &lt;i&gt;generic common architectural elements&lt;/i&gt; that I&amp;#8217;ve identified and collected in a generic architectural blueprint. It&amp;#8217;s my intent to provide a blueprint that provides guidance and not deep technical details.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-13.23.05.png"&gt;&lt;img class=" aligncenter wp-image-550157 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-13.23.05.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-13.23.05.png" alt="Generic common architectural elements" width="914" height="86" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-13.23.05.png 914w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-13.23.05-300x28.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-13.23.05-768x72.png 768w" sizes="(max-width: 914px) 100vw, 914px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This section covers the visual representations as presented, but it&amp;#8217;s expected that they&amp;#8217;ll be evolving visually over time. There are many ways to represent each element in this architectural blueprint, but I&amp;#8217;ve chosen icons, text, and colors that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or &lt;a href="https://www.schabell.org/p/contact.html" target="_blank" rel="noopener"&gt;contact me directly&lt;/a&gt; with your feedback.&lt;/p&gt; &lt;p&gt;Now let&amp;#8217;s take a look at the details in this architecture and outline the elements uncovered in my research.&lt;/p&gt; &lt;h2&gt;API management&lt;/h2&gt; &lt;p&gt;Gateways into an organization are split between managing API access and hiding the actual landscape behind accessing services in the organization. The first element I identified was a management platform for handling API gateway activities.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-14.44.05.png"&gt;&lt;img class=" aligncenter wp-image-550167 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-14.44.05.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-14.44.05-300x199.png" alt="Management platform for handling API gateway activities" width="300" height="199" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-14.44.05-300x199.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-14.44.05-768x509.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-14.44.05.png 794w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;i&gt;API management &lt;/i&gt;refers to how access is provided to an organization&amp;#8217;s services. It&amp;#8217;s the critical path for access internally to services as well as externally.&lt;/p&gt; &lt;p&gt;Researching customer portfolio solutions revealed that API management provides access to service interfaces, applications, and other integration &lt;a href="https://developers.redhat.com/blog/category/microservices/"&gt;microservices&lt;/a&gt;. It&amp;#8217;s providing scalability, reliability, and interface usage metrics that customers evaluate during operations monitoring.&lt;/p&gt; &lt;p&gt;In the generic architecture blueprint, it&amp;#8217;s managing interfaces from the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Front-end microservices (providing access to internal integration microservices)&lt;/li&gt; &lt;li&gt;Process facade microservices (providing access to automated integration processes)&lt;/li&gt; &lt;li&gt;Other applications (providing access to aggregated microservices or other internal applications)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Part of the process of eventual access from external parties to internal services through interfaces involves hiding the specific networking details. To do this, we&amp;#8217;ll examine &lt;i&gt;reverse proxies &lt;/i&gt;details.&lt;/p&gt; &lt;h2&gt;Reverse proxies&lt;/h2&gt; &lt;p&gt;This covers various solutions found in research, but all are delivering the same functionality.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-14.44.14.png"&gt;&lt;img class=" aligncenter wp-image-550187 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-14.44.14.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-14.44.14-300x201.png" alt="Reverse proxies" width="300" height="201" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-14.44.14-300x201.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-14.44.14-768x514.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-12-07-at-14.44.14.png 792w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The basic security is achieved through these proxies, because they are acting on requests from third parties. By retrieving requested resources for their clients, all external parties are prevented from having actual access to internal networks.&lt;/p&gt; &lt;p&gt;Interactions on behalf of their clients provide them access to the following microservices:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Front-end microservices (providing access to internal integration microservices)&lt;/li&gt; &lt;li&gt;Process facade microservices (providing access to automated integration processes)&lt;/li&gt; &lt;li&gt;Other applications (providing access to aggregated microservices or other internal applications)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;These details are not all-telling, but should give you the guidance you need to get started in your own architectural situations.&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s next&lt;/h2&gt; &lt;p&gt;This overview covers the API and proxy elements that make up our architecture blueprint for the omnichannel customer experience use case.&lt;/p&gt; &lt;p&gt;An overview of the series on omnichannel customer experience portfolio architecture blueprint can be found here:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/28/integration-is-key-to-customer-experience/"&gt;Part 1: How integration is key to customer experience&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/30/common-architectural-elements-for-modern-integration-architectures/"&gt;Part 2: Common architectural elements for modern integration architectures&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/14/integration-of-external-application-details-part-3/"&gt;Part 3: Integration of external application details&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/20/integration-of-api-management-details-part-4/"&gt;Part 4: Integration of API management details (this article)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 5: Details of specific elements (container platform, storage services)&lt;/li&gt; &lt;li&gt;Part 6: Application integration details&lt;/li&gt; &lt;li&gt;Part 7: Dissecting several specific application integration architectures&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Catch up on any articles you missed by following one of the links above.&lt;/p&gt; &lt;p&gt;Next in this series, taking a look at the details of specific elements in an architecture for omnichannel customer experience.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Fintegration-of-api-management-details-part-4%2F&amp;#38;linkname=Integration%20of%20API%20management%20details%20%28Part%204%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Fintegration-of-api-management-details-part-4%2F&amp;#38;linkname=Integration%20of%20API%20management%20details%20%28Part%204%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Fintegration-of-api-management-details-part-4%2F&amp;#38;linkname=Integration%20of%20API%20management%20details%20%28Part%204%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Fintegration-of-api-management-details-part-4%2F&amp;#38;linkname=Integration%20of%20API%20management%20details%20%28Part%204%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Fintegration-of-api-management-details-part-4%2F&amp;#38;linkname=Integration%20of%20API%20management%20details%20%28Part%204%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Fintegration-of-api-management-details-part-4%2F&amp;#38;linkname=Integration%20of%20API%20management%20details%20%28Part%204%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Fintegration-of-api-management-details-part-4%2F&amp;#38;linkname=Integration%20of%20API%20management%20details%20%28Part%204%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Fintegration-of-api-management-details-part-4%2F&amp;#38;linkname=Integration%20of%20API%20management%20details%20%28Part%204%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F20%2Fintegration-of-api-management-details-part-4%2F&amp;#038;title=Integration%20of%20API%20management%20details%20%28Part%204%29" data-a2a-url="https://developers.redhat.com/blog/2018/12/20/integration-of-api-management-details-part-4/" data-a2a-title="Integration of API management details (Part 4)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/20/integration-of-api-management-details-part-4/"&gt;Integration of API management details (Part 4)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/tG0kys51Uz4" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In Part 3 of this series, we started diving into the details that determine how your integration becomes the key to transforming your customer experience. It started with laying out the process of how I&amp;#8217;ve approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it&amp;#8217;s [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/20/integration-of-api-management-details-part-4/"&gt;Integration of API management details (Part 4)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/12/20/integration-of-api-management-details-part-4/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">546457</post-id><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-12-20T13:00:44Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/20/integration-of-api-management-details-part-4/</feedburner:origLink></entry><entry><title>Integration Key to Customer Experience - Container Platform Essentials</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ZNMv8tKA8O8/integraiton-key-to-customer-experience-container-platform.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="BPM Suite" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-integration_key_to_customer_experience_container_platform_essentials</id><updated>2018-12-21T08:58:22Z</updated><published>2018-12-20T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-h6FO-sdoH4A/W-AjgSgf-aI/AAAAAAAAtPw/JFoyKy0JPbU9hj0jggWQqESQc6Ywr0GaQCPcBGAYYCw/s1600/omnichannel-header.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="454" data-original-width="895" height="162" src="https://2.bp.blogspot.com/-h6FO-sdoH4A/W-AjgSgf-aI/AAAAAAAAtPw/JFoyKy0JPbU9hj0jggWQqESQc6Ywr0GaQCPcBGAYYCw/s320/omnichannel-header.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Part 5 - container platform details&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;In &lt;a href="https://www.schabell.org/2018/12/integration-key-to-customer-experience-api-management-details.html" target="_blank"&gt;my previous article from this series&lt;/a&gt; we looked in to details that determine how your integration becomes the key to transforming your customer experience.&lt;br /&gt;&lt;br /&gt;It started with laying out the process of how I've approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it's time to cover various blueprint details.&lt;br /&gt;&lt;br /&gt;This article has reached the core elements in the blueprint (&lt;i&gt;container platform and microservices), &lt;/i&gt;which are crucial to the&amp;nbsp;generic architectural overview.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Architectural details&lt;/h3&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;a href="https://3.bp.blogspot.com/-Xp_X9Wsyz-A/XBuWa4FsX6I/AAAAAAAAtXo/2WjgRqI5VVUobF2t9_GtEICAWxsB9gwrQCLcBGAs/s1600/Screenshot%2B2018-12-20%2Bat%2B14.17.16.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="321" data-original-width="1114" height="92" src="https://3.bp.blogspot.com/-Xp_X9Wsyz-A/XBuWa4FsX6I/AAAAAAAAtXo/2WjgRqI5VVUobF2t9_GtEICAWxsB9gwrQCLcBGAs/s320/Screenshot%2B2018-12-20%2Bat%2B14.17.16.png" title="" width="320" /&gt;&lt;/a&gt;As mentioned before, the architectural details covered here are base on real customer integration solutions using open source technologies. The elements presented here are then the &lt;i&gt;generic common architectural elements&lt;/i&gt;&amp;nbsp;that I've identified and collected in a generic architectural blueprint. It's my intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented, but it's expected that they'll be evolving visually over time. There are many ways to represent each element in this architectural blueprint, but I've chosen icons, text and colours that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or &lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact me directly&lt;/a&gt; with your feedback.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Now let's take a look at the details in this architecture and outline the elements uncovered in my research.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Container platform&lt;/h3&gt;&lt;div&gt;Central to all the research conducted was the use of a container platform for some if not all the microservices and applications associated with the omnichannel solution.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://3.bp.blogspot.com/-D5VduBCcIRY/XBuZfi5sdvI/AAAAAAAAtX0/lByeA4i8eS4ugT4UbnC88jO3SZ0AMyyIgCLcBGAs/s1600/Screenshot%2B2018-12-20%2Bat%2B14.30.16.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="102" data-original-width="1102" height="29" src="https://3.bp.blogspot.com/-D5VduBCcIRY/XBuZfi5sdvI/AAAAAAAAtX0/lByeA4i8eS4ugT4UbnC88jO3SZ0AMyyIgCLcBGAs/s320/Screenshot%2B2018-12-20%2Bat%2B14.30.16.png" title="" width="320" /&gt;&lt;/a&gt;Without a doubt the flexibility and consistency provided by a container platform enhances delivery of solutions by the researched development teams. The operations teams became efficient with container deployments, management and monitoring standardized across multicloud infrastructures.&lt;br /&gt;&lt;br /&gt;Within the container platform the first elements are related to the microservices intended to facilitate front end applications interactions with the rest of the integration services. Specific groups of microservices are touched on that service the externally deployed applications:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;i&gt;front end microservices&lt;/i&gt; (providing access to internal integration microservices)&lt;/li&gt;&lt;li&gt;&lt;i&gt;process facade microservices&lt;/i&gt; (providing access to automated integration processes)&lt;/li&gt;&lt;li&gt;other integration&amp;nbsp;&lt;i&gt;applications&lt;/i&gt; (providing access to aggregated microservices or other internal applications)&lt;/li&gt;&lt;li&gt;single-sign-on or &lt;i&gt;SSO plugins&lt;/i&gt; proliferate for security across the microservices and container platform&lt;/li&gt;&lt;/ul&gt;The deeper access to internal microservices are the next details we'll examine, touching on &lt;i&gt;integration and data microservices.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Core microservices&lt;/h3&gt;This section of the blueprint highlights a few containerized services and the core microservices.&lt;br /&gt;&lt;br /&gt;The process facade microservices expose core process integration functionality that is part of the depicted &lt;i&gt;process servers &lt;/i&gt;elements. Most deployments host two for availability and leverage the container platform's load balancing features.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://2.bp.blogspot.com/-EQmlu5W_kmc/XBuZnK1QYcI/AAAAAAAAtX4/IyFfhy_rcDw2nfMuJKBh7f9Ri2qZHwujQCLcBGAs/s1600/Screenshot%2B2018-12-20%2Bat%2B14.30.25.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="179" data-original-width="1095" height="52" src="https://2.bp.blogspot.com/-EQmlu5W_kmc/XBuZnK1QYcI/AAAAAAAAtX4/IyFfhy_rcDw2nfMuJKBh7f9Ri2qZHwujQCLcBGAs/s320/Screenshot%2B2018-12-20%2Bat%2B14.30.25.png" title="" width="320" /&gt;&lt;/a&gt;The &lt;i&gt;integration microservices &lt;/i&gt;and &lt;i&gt;integration data microservices&lt;/i&gt;&amp;nbsp;provide access to most anything in the organization. Imagine mainframes, other third-party helpdesk desktop applications, third-party cloud platform service integration, or whatever your imagination can come up with. Data integration can be container native storage, third-party products, or traditional storage components found in any architecture.&lt;br /&gt;&lt;br /&gt;An &lt;i&gt;SSO server &lt;/i&gt;element is shown to complete the story of what's backing the connectivity from microservices to the authentication and authorization back-end system(s) that one encounters in an organization.&lt;br /&gt;&lt;br /&gt;The final items shown here are special instances of storage labeled &lt;i&gt;real-time data storage&lt;/i&gt;, which were part of a solution researched that included integration services requiring special performance storage in containers to stream video to external applications. Interesting enough to include here, though one would expect it in the storage services.&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;div&gt;These details are not all-knowing, but should give you the guidance you'd need to get started in your own architectural situations.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div&gt;This overview covers the container platform elements that make up our architecture blueprint for omnichannel customer experience use case.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;An overview of the series on omnichannel customer experience portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-architectural-elements.html" target="_blank"&gt;Generic common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-external-application-details.html" target="_blank"&gt;External application details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/12/integration-key-to-customer-experience-api-management-details.html" target="_blank"&gt;API management details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/12/integraiton-key-to-customer-experience-container-platform.html" target="_blank"&gt;Container platform essentials&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Details of specific elements (storage services)&lt;/li&gt;&lt;li&gt;Application integration details&lt;/li&gt;&lt;li&gt;Dissecting several specific application integration architectures&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, taking a look at the details of&amp;nbsp;specific elements in an architecture for omnichannel customer experience.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=I_SZwkk_O0w:Xqyp0Yn7nj8:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=I_SZwkk_O0w:Xqyp0Yn7nj8:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=I_SZwkk_O0w:Xqyp0Yn7nj8:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=I_SZwkk_O0w:Xqyp0Yn7nj8:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=I_SZwkk_O0w:Xqyp0Yn7nj8:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=I_SZwkk_O0w:Xqyp0Yn7nj8:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=I_SZwkk_O0w:Xqyp0Yn7nj8:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=I_SZwkk_O0w:Xqyp0Yn7nj8:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=I_SZwkk_O0w:Xqyp0Yn7nj8:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=I_SZwkk_O0w:Xqyp0Yn7nj8:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=I_SZwkk_O0w:Xqyp0Yn7nj8:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/I_SZwkk_O0w" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ZNMv8tKA8O8" height="1" width="1" alt=""/&gt;</content><summary>Part 5 - container platform detailsIn my previous article from this series we looked in to details that determine how your integration becomes the key to transforming your customer experience. It started with laying out the process of how I've approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it's time to cover va...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-12-20T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/I_SZwkk_O0w/integraiton-key-to-customer-experience-container-platform.html</feedburner:origLink></entry></feed>
